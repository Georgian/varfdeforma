# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
jobs:
  build-frontend:
    docker:
      - image: circleci/python:3-node-browsers
    
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build docker images
          command: |
            cd vdf-frontend
            docker build -t georgian/vdf-frontend:latest .
     
      - run:
          name: Push docker images
          command: |
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push georgian/vdf-frontend:latest
  
  build-backend:  
    docker:
      - image: circleci/openjdk:11-jdk

    steps:
      - setup_remote_docker
      - checkout
                                   
      # Download and cache dependencies
      - restore_cache:
          keys:
              - v1-dependencies-{{ checksum "build.gradle" }}
              # fallback to using the latest cache if no exact match is found
              - v1-dependencies-
          
      - run: gradle dependencies

      - save_cache:
          paths:
              - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
                  
      - run:
          name: Build docker images
          command: |
            cd vdf-backend
            gradle dockerBuildImage
            
      - run:
          name: Push docker images
          command: |
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push georgian/vdf-backend:latest

  deploy:
    machine:
      image: ubuntu-1604:202004-01
      
    steps:
      - checkout
      - run: ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
      - run:
          name: Deploy to Digital Ocean and run services
          command: |
            pwd
            ls
            bash ./deploy.sh -h $DEPLOY_HOST -u $DEPLOY_USER -r $RAW_REPO_URL
      
workflows:
  version: 2
  branches:
    - only: 
        prod
  main-workflow:
    jobs:
      - build-frontend
      - build-backend
      - deploy:
          requires:
            - build-frontend
            - build-backend

